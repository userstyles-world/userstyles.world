#!/usr/bin/env sh

log() { printf "%s\n" "$@"; }

invalid() { printf "Invalid option: %s\n" "$*"; }

check_cmd() {
    if ! command -v "$1" >/dev/null; then
        log "Missing $1!"
        case "$1" in
            air) log "Install it with 'go install github.com/cosmtrek/air'" ;;
            sassc) log "Install 'sassc' with your package manager" ;;
            unzip) log "Install 'unzip' with your package manager" ;;
            inotify*) log "Install 'notify-tools' with your package manager" ;;
        esac
        return 1
    fi
}

check_dir() {
    pwd="$(pwd)"
    cd "${pwd%/tools}" || exit
}

export_secrets() {
    set -a 
    . data/.env
    set +a
}

fonts() {
    log "fonts"

    # Check if unzip is installed.
    check_cmd unzip
    [ $? = 1 ] && exit

    check_dir

    # Extract the latest release.
    src="$(curl -s https://api.github.com/repos/rsms/inter/releases/latest | sed -n 's/.*browser_download_url.*"\(http.*\)"/\1/p')"

    # Extract tag version from the following URL:
    # https://github.com/rsms/inter/releases/download/v3.19/Inter-3.19.zip
    version="$(echo "$src" | sed -n 's/.*\/\(v.*\)\/.*/\1/p')"

    # Check if the latest version is installed.
    if [ ! -e "data/inter-${version}.zip" ]; then
        # If fonts directory exists, remove it.
        if [ -e static/fonts ]; then
            log "Removing old fonts."
            rm -f data/inter-*.zip
            rm -rf static/fonts
        fi

        log "Downloading Inter $version..."

        # Download the archive with their respective version number.
        curl -L "$src" -o "data/inter-$version.zip"

        _fontsExtract "$version"
    else
        # If fonts directory doesn't exist, extract fonts.
        if [ ! -e static/fonts ]; then
            log "Extracting fonts..."
            _fontsExtract "$version"
        else
            log "Fonts are up to date."
        fi
    fi
}

_fontsExtract() {
    # Extract specific variants that we use.
    fonts="Regular Bold Italic BoldItalic"
    for font in $fonts; do
        unzip -j -d static/fonts "data/inter-$1.zip" "Inter Web/Inter-${font}.*"
    done
}

prod() {
    log "prod"
    check_dir
    export_secrets
    env PORT=":${2:-3001}" \
        DB="${3:-prod.db}" \
        SALT="${4:-15}" \
        ./userstyles.world
}

sass() {
    log "sass"
    check_cmd sassc
    [ $? = 1 ] && exit

    # Go to project root.
    check_dir

    # Sassc fails if directory doesn't exist.
    mkdir -p static/css

    if [ "$2" = "--watch" ]; then
        check_cmd inotifywait
        [ $? = 1 ] && exit
        while inotifywait -r -e close_write scss; do
            sassc scss/main.scss static/css/main.css
        done
    else
        sassc --style compressed scss/main.scss static/css/main.css
    fi
}

drop() {
    log "drop"
    check_cmd air
    env DB_DROP="1" \
        DB_COLOR="true" \
        DB_DEBUG="${2:-silent}" \
        DB_RANDOM_DATA="${3:-false}" \
        air -c tools/air.toml
}

seed_test_data() {
    log "seed_test_data"
    check_cmd air
    build
    export_secrets
    env DB_DROP="1" \
        DB_COLOR="true" \
        DB_DEBUG="silent" \
        DB_DROP="true" \
        EXIT_AFTER_SEED="true" \
        ./userstyles.world

}

dev() {
    log "dev"
    check_cmd air
    check_dir
    export_secrets
    env DB_DEBUG="${2:-silent}" \
        DB_DROP="${3:-false}" \
        DB_COLOR="true" \
        air -c tools/air.toml
}

# This option builds USw executable for use in production.
# To build it on unsupported systems, run `go build` in project root directory.
build() {
    log "build"
    check_dir

    log "setting up fonts"
    fonts

    log "compiling sass"
    sass

    log "compiling typescript"
    go run typescript/run.go

    log "compiling executable"
    GOOS=linux go build \
        -ldflags '-s -w -extldflags "-fno-PIC -static"' \
        -buildmode pie -tags 'osusergo netgo static_build'
}

ts() {
    log "Compiling typescript"

    env DEBUG="${2:-false}" \
        WATCH="${3:-false}" \
        go run typescript/run.go
}

case "$1" in
    testdata) seed_test_data ;;
    build) build "$@" ;;
    fonts) fonts "$@" ;;
    dev)  dev    "$@" ;;
    drop) drop   "$@" ;;
    prod) prod   "$@" ;;
    sass) sass   "$@" ;;
    ts) ts       "$@" ;;
    *) invalid   "$@" ;;
esac
